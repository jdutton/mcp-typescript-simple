# MCP Server Configuration Example
# Copy this file to .env and configure for your setup

# ===== Transport Configuration =====
# Choose transport mode: stdio (dev), sse (legacy), streamable_http (recommended)
MCP_MODE=streamable_http

# Skip OAuth for development (set to true for testing without OAuth)
MCP_DEV_SKIP_AUTH=false

# ===== HTTP Server Configuration =====
HTTP_PORT=3000
HTTP_HOST=localhost

# ===== OAuth Provider Selection =====
# Choose: google, github, microsoft, generic

# ===== Google OAuth Configuration =====
# Get these from: https://console.cloud.google.com/
# GOOGLE_CLIENT_ID=your_google_client_id.apps.googleusercontent.com
# GOOGLE_CLIENT_SECRET=your_google_client_secret
# GOOGLE_REDIRECT_URI=http://localhost:3000/auth/google/callback
# GOOGLE_SCOPES=openid,email,profile

# ===== GitHub OAuth Configuration =====
# Get these from: https://github.com/settings/developers
# GITHUB_CLIENT_ID=your_github_client_id
# GITHUB_CLIENT_SECRET=your_github_client_secret
# GITHUB_REDIRECT_URI=http://localhost:3000/auth/github/callback
# GITHUB_SCOPES=user:email,read:user

# ===== Microsoft OAuth Configuration =====
# Get these from: https://portal.azure.com/ (App registrations)
# MICROSOFT_CLIENT_ID=your_azure_app_id
# MICROSOFT_CLIENT_SECRET=your_azure_client_secret
# MICROSOFT_REDIRECT_URI=http://localhost:3000/auth/microsoft/callback
# MICROSOFT_TENANT_ID=common
# MICROSOFT_SCOPES=openid,profile,email,User.Read

# ===== Generic OAuth Configuration =====
# For custom providers (GitLab, Auth0, Okta, etc.)
# OAUTH_CLIENT_ID=your_client_id
# OAUTH_CLIENT_SECRET=your_client_secret
# OAUTH_REDIRECT_URI=http://localhost:3000/auth/oauth/callback
# OAUTH_AUTHORIZATION_URL=https://your-provider.com/oauth/authorize
# OAUTH_TOKEN_URL=https://your-provider.com/oauth/token
# OAUTH_USER_INFO_URL=https://your-provider.com/api/user
# OAUTH_REVOCATION_URL=https://your-provider.com/oauth/revoke
# OAUTH_PROVIDER_NAME=Your Custom Provider
# OAUTH_SCOPES=openid,profile,email

# ===== Security Configuration =====
# Use HTTPS in production
REQUIRE_HTTPS=false

# Restrict allowed origins (comma-separated)
# ALLOWED_ORIGINS=http://localhost:3000,https://yourdomain.com

# Restrict allowed hosts (comma-separated)
# ALLOWED_HOSTS=localhost,yourdomain.com

# Session secret (use a secure random string in production)
SESSION_SECRET=dev-session-secret-change-in-production

# ===== OAuth Dynamic Client Registration (DCR) Configuration =====
# Storage backend: auto (default), memory, file, redis
# DCR_STORE_TYPE=auto

# File storage path for registered clients (default: ./data/oauth-clients.json)
# DCR_FILE_PATH=./data/oauth-clients.json

# Token store type: auto (default), memory, file, redis
# DCR_TOKEN_STORE=auto

# Token file path (default: ./data/access-tokens.json)
# DCR_TOKEN_FILE_PATH=./data/access-tokens.json

# ===== Session Storage Configuration =====
# MCP session metadata storage (for horizontal scalability)
# Options: auto (default), memory, redis

# Redis URL for session storage (local Redis, Docker, cloud providers, etc.)
# Docker Compose: redis://redis:6379 (auto-configured)
# Vercel: Use Upstash Redis or Redis Cloud from Vercel Marketplace
# Local: redis://localhost:6379
# REDIS_URL=redis://localhost:6379

# ===== LLM Provider Configuration =====
# At least one provider is required for MCP tool functionality
# ANTHROPIC_API_KEY=your_claude_api_key
# OPENAI_API_KEY=your_openai_api_key
# GOOGLE_API_KEY=your_gemini_api_key

# Default LLM provider (optional, will auto-detect if not set)
# LLM_DEFAULT_PROVIDER=claude

# ===== Environment =====
NODE_ENV=development