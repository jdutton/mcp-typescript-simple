services:
  # Redis service for session storage (shared across all MCP server instances)
  redis:
    image: redis:7-alpine
    container_name: mcp-redis-compose
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data  # Persist Redis session data
    command: redis-server --save 60 1 --loglevel warning  # Save every 60s if 1+ keys changed
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Load-balanced multi-instance setup
  # Docker is EXCLUSIVELY for multi-node load-balanced testing via nginx on port 8080
  #
  # OAuth Configuration:
  # - Uses .env.oauth.docker (optional) with redirect URIs for localhost:8080
  # - If .env.oauth.docker exists with MCP_DEV_SKIP_AUTH=false, OAuth is enabled
  # - If .env.oauth.docker doesn't exist, runs without OAuth for simple multi-node testing
  # - Redis shared across all instances for session persistence

  # MCP server instance 1
  mcp-server-1:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      REDIS_URL: redis://redis:6379
      NODE_ENV: development
      MCP_MODE: streamable_http
      HTTP_PORT: 3000
      HTTP_HOST: "0.0.0.0"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://grafana-otel:4318"
      OTEL_SERVICE_NAME: "mcp-server-1"
    env_file:
      - path: .env.oauth.docker
        required: false
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      grafana-otel:
        condition: service_healthy
    networks:
      - mcp-network

  # MCP server instance 2
  mcp-server-2:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      REDIS_URL: redis://redis:6379
      NODE_ENV: development
      MCP_MODE: streamable_http
      HTTP_PORT: 3000
      HTTP_HOST: "0.0.0.0"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://grafana-otel:4318"
      OTEL_SERVICE_NAME: "mcp-server-2"
    env_file:
      - path: .env.oauth.docker
        required: false
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      grafana-otel:
        condition: service_healthy
    networks:
      - mcp-network

  # MCP server instance 3
  mcp-server-3:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      REDIS_URL: redis://redis:6379
      NODE_ENV: development
      MCP_MODE: streamable_http
      HTTP_PORT: 3000
      HTTP_HOST: "0.0.0.0"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://grafana-otel:4318"
      OTEL_SERVICE_NAME: "mcp-server-3"
    env_file:
      - path: .env.oauth.docker
        required: false
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      grafana-otel:
        condition: service_healthy
    networks:
      - mcp-network

  # Nginx load balancer
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx
    ports:
      - "8080:8080"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - mcp-server-1
      - mcp-server-2
      - mcp-server-3
    networks:
      - mcp-network

  # Grafana OTEL LGTM Stack - Observability (Logs, Traces, Metrics)
  # Provides production-like observability pipeline for all MCP server instances
  grafana-otel:
    image: grafana/otel-lgtm:latest
    container_name: mcp-grafana-otel
    ports:
      - "3200:3000"   # Grafana UI
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP (used by MCP servers)
    volumes:
      - grafana-otel-data:/data  # Persist Grafana, Loki, Tempo, Prometheus data
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "test", "-f", "/tmp/ready"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s

volumes:
  redis-data:
    driver: local
  grafana-otel-data:
    driver: local

networks:
  mcp-network:
    driver: bridge
