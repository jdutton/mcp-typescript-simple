#!/usr/bin/env tsx
/**
 * GitHub Workflow Generator for Validation Pipeline
 *
 * Generates .github/workflows/validate.yml from tools/validation-config.ts
 * Ensures perfect sync between local validation and CI validation.
 *
 * Usage:
 *   npm run validate:generate-workflow     # Generate and write to file
 *   npm run validate:check-workflow-sync   # Check if workflow needs regeneration
 *
 * @extraction-target @agentic-workflow
 */

import { readFileSync, writeFileSync, existsSync } from 'fs';
import { VALIDATION_PHASES, getPhase1Jobs, getAllCIJobs } from './validation-config.js';
import yaml from 'js-yaml';

interface GitHubWorkflowStep {
  name?: string;
  uses?: string;
  with?: Record<string, any>;
  run?: string;
  env?: Record<string, string>;
}

interface GitHubWorkflowJob {
  name: string;
  'runs-on': string;
  needs?: string[];
  if?: string;
  steps: GitHubWorkflowStep[];
}

interface GitHubWorkflow {
  name: string;
  on: any;
  jobs: Record<string, GitHubWorkflowJob>;
}

/**
 * Generate GitHub Actions workflow from validation config
 */
function generateWorkflow(): string {
  const jobs: Record<string, GitHubWorkflowJob> = {};

  // Generate jobs for each validation step
  for (const phase of VALIDATION_PHASES) {
    // Determine job dependencies (needs)
    const needs = phase.dependsOn ? getPhase1Jobs() : undefined;

    for (const step of phase.steps) {
      const jobSteps: GitHubWorkflowStep[] = [
        { uses: 'actions/checkout@v4' },
        {
          uses: 'actions/setup-node@v4',
          with: {
            'node-version': '22.x',
            cache: 'npm'
          }
        },
        { run: 'npm ci' }
      ];

      // Add Playwright installation for headless tests
      if (step.ciJob === 'headless-tests') {
        jobSteps.push({
          name: 'Install Playwright browsers',
          run: 'npx playwright install --with-deps'
        });
      }

      // Add the actual test command
      const testStep: GitHubWorkflowStep = { run: step.command };

      // Add environment variables for test steps
      // ALL test steps get LLM_OUTPUT=1 for concise CI output
      testStep.env = {
        LLM_OUTPUT: '1',  // Enable LLM-optimized output (concise, failure-focused)
      };

      // Add secrets for steps that need them
      if (step.requiresSecrets) {
        testStep.env = {
          LLM_OUTPUT: '1',  // Enable LLM-optimized output
          ANTHROPIC_API_KEY: '${{ secrets.ANTHROPIC_API_KEY }}',
          OPENAI_API_KEY: '${{ secrets.OPENAI_API_KEY }}',
          GOOGLE_API_KEY: '${{ secrets.GOOGLE_API_KEY }}'
        };
      }

      jobSteps.push(testStep);

      jobs[step.ciJob] = {
        name: step.name,
        'runs-on': 'ubuntu-latest',
        ...(needs && { needs }),
        steps: jobSteps
      };
    }
  }

  // Add gate job - all validation must pass
  const allJobs = getAllCIJobs();
  jobs['all-validation-passed'] = {
    name: 'All Validation Passed',
    'runs-on': 'ubuntu-latest',
    needs: allJobs,
    if: 'always()',
    steps: [
      {
        name: 'Check all validation jobs',
        run: generateCheckScript(allJobs)
      }
    ]
  };

  const workflow: GitHubWorkflow = {
    name: 'Validation Pipeline',
    on: {
      push: {
        branches: ['main', 'develop']
      },
      pull_request: {
        branches: ['main']
      }
    },
    jobs
  };

  // Generate YAML with header comment
  const header = [
    '# THIS FILE IS AUTO-GENERATED by tools/generate-validate-workflow.ts',
    '# DO NOT EDIT MANUALLY - Edit tools/validation-config.ts instead',
    '# Regenerate with: npm run validate:generate-workflow',
    '#',
    '# Source of truth: tools/validation-config.ts',
    `# Generated: ${new Date().toISOString()}`,
    ''
  ].join('\n');

  const workflowYaml = yaml.dump(workflow, {
    lineWidth: -1,
    noRefs: true,
    quotingType: '"',
    forceQuotes: false
  });

  return header + workflowYaml;
}

/**
 * Generate bash script to check all job statuses
 */
function generateCheckScript(jobNames: string[]): string {
  const checks = jobNames.map(job => {
    const envVar = `needs.${job.replace(/-/g, '_')}.result`;
    return `[ "\${{ ${envVar} }}" != "success" ]`;
  }).join(' || \\\n             ');

  return `if ${checks}; then
            echo "‚ùå Some validation checks failed"
            exit 1
          fi
          echo "‚úÖ All validation checks passed!"`;
}

/**
 * Check if workflow file is in sync with validation config
 */
function checkSync(): { inSync: boolean; diff?: string } {
  const workflowPath = '.github/workflows/validate.yml';

  if (!existsSync(workflowPath)) {
    return {
      inSync: false,
      diff: 'Workflow file does not exist - needs generation'
    };
  }

  const currentWorkflow = readFileSync(workflowPath, 'utf8');
  const expectedWorkflow = generateWorkflow();

  // Normalize for comparison (strip timestamps)
  const normalize = (content: string) =>
    content.replace(/# Generated: .+/g, '# Generated: <timestamp>');

  const currentNormalized = normalize(currentWorkflow);
  const expectedNormalized = normalize(expectedWorkflow);

  if (currentNormalized === expectedNormalized) {
    return { inSync: true };
  }

  return {
    inSync: false,
    diff: 'Workflow file differs from validation config'
  };
}

/**
 * Main entry point
 */
async function main() {
  const args = process.argv.slice(2);
  const command = args[0] || '--write';

  if (command === '--check') {
    // Check sync only
    const { inSync, diff } = checkSync();

    if (inSync) {
      console.log('‚úÖ Workflow file is in sync with validation config');
      process.exit(0);
    } else {
      console.log('‚ùå Workflow file is out of sync with validation config');
      console.log('');
      console.log(diff);
      console.log('');
      console.log('Run this to regenerate:');
      console.log('  npm run validate:generate-workflow');
      process.exit(1);
    }
  } else if (command === '--write') {
    // Generate and write workflow
    const workflow = generateWorkflow();
    const workflowPath = '.github/workflows/validate.yml';

    writeFileSync(workflowPath, workflow);

    console.log('‚úÖ Generated workflow file:');
    console.log(`   ${workflowPath}`);
    console.log('');
    console.log('üìù Commit this file to version control');
  } else {
    console.error('‚ùå Unknown command:', command);
    console.log('');
    console.log('Usage:');
    console.log('  npm run validate:generate-workflow       # Generate workflow');
    console.log('  npm run validate:check-workflow-sync     # Check if in sync');
    process.exit(1);
  }
}

main().catch((error) => {
  console.error('‚ùå Workflow generator failed:', error);
  process.exit(1);
});
